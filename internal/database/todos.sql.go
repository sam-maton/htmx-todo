// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todos.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos(id, created_at, updated_at, user_id, description, title, completed)
VALUES (gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4)
RETURNING id, created_at, updated_at, description, title, completed
`

type CreateTodoParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	Description sql.NullString `json:"description"`
	Title       string         `json:"title"`
	Completed   bool           `json:"completed"`
}

type CreateTodoRow struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Description sql.NullString `json:"description"`
	Title       string         `json:"title"`
	Completed   bool           `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (CreateTodoRow, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Description,
		arg.Title,
		arg.Completed,
	)
	var i CreateTodoRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Title,
		&i.Completed,
	)
	return i, err
}

const getTodosByUserId = `-- name: GetTodosByUserId :many
SELECT id, created_at, updated_at, description, title, completed
FROM todos
WHERE user_id = $1
`

type GetTodosByUserIdRow struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Description sql.NullString `json:"description"`
	Title       string         `json:"title"`
	Completed   bool           `json:"completed"`
}

func (q *Queries) GetTodosByUserId(ctx context.Context, userID uuid.UUID) ([]GetTodosByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodosByUserIdRow
	for rows.Next() {
		var i GetTodosByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Title,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
