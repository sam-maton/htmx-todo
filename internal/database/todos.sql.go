// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos(id, created_at, updated_at, user_id, title, completed)
VALUES (gen_random_uuid(), NOW(), NOW(), $1, $2, $3)
RETURNING id, created_at, updated_at, title, completed
`

type CreateTodoParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
}

type CreateTodoRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (CreateTodoRow, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.UserID, arg.Title, arg.Completed)
	var i CreateTodoRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Completed,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, created_at, updated_at, title, completed, user_id
FROM todos
WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Completed,
		&i.UserID,
	)
	return i, err
}

const getTodosByUserId = `-- name: GetTodosByUserId :many
SELECT id, created_at, updated_at, title, completed
FROM todos
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetTodosByUserIdRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
}

func (q *Queries) GetTodosByUserId(ctx context.Context, userID uuid.UUID) ([]GetTodosByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodosByUserIdRow
	for rows.Next() {
		var i GetTodosByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTodoCompleted = `-- name: SetTodoCompleted :one
UPDATE todos SET completed = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, title, completed
`

type SetTodoCompletedParams struct {
	ID        uuid.UUID `json:"id"`
	Completed bool      `json:"completed"`
}

type SetTodoCompletedRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
}

func (q *Queries) SetTodoCompleted(ctx context.Context, arg SetTodoCompletedParams) (SetTodoCompletedRow, error) {
	row := q.db.QueryRowContext(ctx, setTodoCompleted, arg.ID, arg.Completed)
	var i SetTodoCompletedRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Completed,
	)
	return i, err
}
